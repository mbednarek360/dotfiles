import { Component } from "preact";
export declare class Connect extends Component<any, {}> {
    unsubscribe: any;
    state: any;
    actions: any;
    componentWillMount(): void;
    componentWillUnmount(): void;
    getProps(): any;
    getActions(): any;
    update: () => void;
    render({ children }: {
        children: any;
    }, state: any, { store }: {
        store: any;
    }): any;
}
export default function connect(mapToProps: any, actions?: {}): (Child: any) => {
    new (props?: any, context?: any): {
        render(): JSX.Element;
        state: {};
        props: any;
        context: any;
        base: HTMLElement;
        linkState: (name: string) => (event: Event) => void;
        setState<K extends never>(state: Pick<{}, K>, callback?: () => void): void;
        setState<K extends never>(fn: (prevState: {}, props: any) => Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        componentWillMount?(): void;
        componentDidMount?(): void;
        componentWillUnmount?(): void;
        componentWillReceiveProps?(nextProps: any, nextContext: any): void;
        shouldComponentUpdate?(nextProps: any, nextState: {}, nextContext: any): boolean;
        componentWillUpdate?(nextProps: any, nextState: {}, nextContext: any): void;
        componentDidUpdate?(previousProps: any, previousState: {}, previousContext: any): void;
    };
    displayName?: string;
    defaultProps?: any;
};
