import * as React from "react";
import propValidation from "../../utils/propsValidation";
declare type mapToProps = (state: object, ownProps?: object) => object;
export declare class Connect extends React.Component<any> {
    static contextTypes: {
        store: typeof propValidation;
    };
    unsubscribe: any;
    state: any;
    actions: any;
    componentWillMount(): void;
    componentWillUnmount(): void;
    getProps(): any;
    getActions(): any;
    update: () => void;
    render(): any;
}
export default function connect(mapToProps?: mapToProps, actions?: {}): (Child: any) => {
    new (props?: any, context?: any): {
        render(): JSX.Element;
        setState<K extends never>(f: (prevState: {}, props: any) => Pick<{}, K>, callback?: () => any): void;
        setState<K extends never>(state: Pick<{}, K>, callback?: () => any): void;
        forceUpdate(callBack?: () => any): void;
        props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<any>;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentWillMount?(): void;
        componentDidMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<any>, nextContext: any): void;
        shouldComponentUpdate?(nextProps: Readonly<any>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUpdate?(nextProps: Readonly<any>, nextState: Readonly<{}>, nextContext: any): void;
        componentDidUpdate?(prevProps: Readonly<any>, prevState: Readonly<{}>, prevContext: any): void;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
    };
};
export {};
